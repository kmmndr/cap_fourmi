# Use the config/database/#{rails_env}.yml file for database config

namespace :database do
  # FIXME : capistrano 3
  #desc "Database seeds population"
  #task :seed do
  #  # OPTIMIZE: test if db/seed.rb has been modified
  #  run "cd #{current_path} && #{bundle_cmd} exec rake db:seed"
  #end

  task :read_local_database_yml do
    set :local_db, YAML.load(File.open(File.join('config', 'database.yml')))['development']
  end

  task :read_remote_database_yml do
    on roles(:db, :only => { :primary => true }) do
      set :remote_db, YAML.load(capture("cat #{shared_path.join('config', 'database.yml')}"))[fetch(:rails_env).to_s]
    end
  end

  task :backup_name do
    on roles(:db, :only => { :primary => true }) do
      now = Time.now
      backup_time = [now.year,now.month,now.day,now.hour,now.min,now.sec].join('-')
      execute "mkdir -p #{backup_to}"
      database = fetch(:remote_db)['database']
      set :backup_file, backup_to.join("#{database}-snapshot-#{backup_time}.sql")
    end
  end
  before :backup_name, :read_remote_database_yml

  desc "Backup your MySQL or PostgreSQL database to 'backup_to' folder"
  task :dump do
    on roles(:db, :only => {:primary => true}) do
      db_username = fetch(:remote_db)['username']
      db_password = fetch(:remote_db)['password']
      db_database = fetch(:remote_db)['database']
      db_host = fetch(:remote_db)['host']
      db_adapter = fetch(:remote_db)['adapter']
      backup_file = fetch(:backup_file)

      case db_adapter
      when 'postgresql'
        execute "PGPASSWORD=#{db_password} pg_dump -w -c -U #{db_username} -h #{db_host} #{db_database} | bzip2 -c > #{backup_file}.bz2" do |ch, data|
          #ch.send_data "#{db_password}\n" #if out=~ /^Password/
        end
      when 'mysql'
        execute "mysqldump --add-drop-table -u #{db_username} -h #{db_host} -p #{db_database} | bzip2 -c > #{backup_file}.bz2" do |ch, stream, out |
          ch.send_data "#{db_password}\n" if out=~ /^Enter password:/
        end
      else
        error "Database type '#{db_adapter}' not handled"
      end
    end
  end
  before :dump, :backup_name

  desc "Retrieve your production database to your local workstation"
  task :retrieve_backup_locally do
    on roles(:db, :only => {:primary => true}) do
      backup_file = fetch(:backup_file)
      file_basename = File.basename(backup_file)
      local_backup_file = File.join('tmp', "#{file_basename}.bz2")

      download! "#{backup_file}.bz2", local_backup_file

      set :local_backup_file, local_backup_file
    end
  end
  before :retrieve_backup_locally, :dump

#  desc "Sync your production database to your local workstation"
#  task :clone_to_local do
#    on roles(:db, :only => {:primary => true}) do
#      local_backup_file = fetch(:local_backup_file)
#      development_info = YAML.load_file("config/database.yml")['development']
#      if development_info['adapter'] == 'mysql'
#        run_str = "bzcat /tmp/#{application}.sql.bz2 | mysql -u #{development_info['username']} --password='#{development_info['password']}' -h #{development_info['host']} #{development_info['database']}"
#      else
#        run_str = "PGPASSWORD=#{development_info['password']} bzcat /tmp/#{application}.sql.bz2 | psql -U #{development_info['username']} -h #{development_info['host']} #{development_info['database']}"
#      end
#      %x!#{run_str}!
#    end
#  end
#  before :clone_to_local, :retrieve_backup_locally
#  before :clone_to_local, :read_local_database_yml

  def backup_to
    fetch(:backup_to) || shared_path.join('db_backups')
  end
end

before "deploy:updating", "database:dump"
#after "deploy:update_code", "database:symlink"
