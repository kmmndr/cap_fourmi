namespace :eye do
  desc "Install eye monitoring tool"
  task :install do
    on roles(fetch(:eye_roles)) do
      execute :env, 'gem', 'install', 'eye'
    end
  end

  desc "Stop processes that eye is monitoring and quit eye"
  task :quit do
    execute_in_context *eye_cmd('quit'), :capture => true
  end
  before :quit, :stop

  desc "Load config file"
  task :load do
    execute_in_context *eye_cmd('load', fetch(:eye_config))
  end
  task :init => :load

  desc "Starts your previous stopped applications"
  task :start do
    execute_in_context *eye_cmd('start', fetch(:eye_app))
  end

  desc "Stops some eye monitored process"
  task :stop do
    execute_in_context *eye_cmd('stop', fetch(:eye_app))
  end

  desc "Restarts the pill from {your-app}/config/pills/{app-name}.pill"
  task :restart do
    execute_in_context *eye_cmd('restart', fetch(:eye_app))
  end

  desc "Prints eyes monitored processes statuses"
  task :info do
    execute_in_context *eye_cmd('info'), :capture => true
  end
  task :status => :info

  def eye_cmd(*args)
    args.unshift(*fetch(:eye_cmd))
  end

  def execute_in_context(*args)
    options = args.last.is_a?(Hash) ? args.pop : {}
    method = options[:capture] ? :capture : :execute

    on roles(fetch(:eye_roles)) do
      with rails_env: fetch(:rails_env) do
        within release_path do
          ret = self.send(method, *args)
          info ret if method == :capture
        end
      end
    end
  end
end

namespace :load do
  task :defaults do
    set :eye_cmd,         -> { [:env, 'eye'] }
    set :eye_app,         -> { fetch(:application) }
    set :eye_config,      -> { shared_path.join('eye', "#{fetch(:eye_app)}.eye") }
    set :eye_roles,       :all
  end
end
